// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../time/models.js";

/**
 * Collection represents an API request collection
 */
export class Collection {
    /**
     * Creates a new Collection instance.
     * @param {Partial<Collection>} [$$source = {}] - The source object to create the Collection.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("created_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["created_at"] = null;
        }
        if (!("updated_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["updated_at"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Collection instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Collection}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Collection(/** @type {Partial<Collection>} */($$parsedSource));
    }
}

/**
 * Environment represents an environment with variables
 */
export class Environment {
    /**
     * Creates a new Environment instance.
     * @param {Partial<Environment>} [$$source = {}] - The source object to create the Environment.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("variables" in $$source)) {
            /**
             * JSON string
             * @member
             * @type {string}
             */
            this["variables"] = "";
        }
        if (!("is_active" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_active"] = false;
        }
        if (!("created_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["created_at"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Environment instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Environment}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Environment(/** @type {Partial<Environment>} */($$parsedSource));
    }
}

/**
 * Folder represents a folder within a collection
 */
export class Folder {
    /**
     * Creates a new Folder instance.
     * @param {Partial<Folder>} [$$source = {}] - The source object to create the Folder.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("collection_id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["collection_id"] = 0;
        }
        if (!("parent_folder_id" in $$source)) {
            /**
             * @member
             * @type {number | null}
             */
            this["parent_folder_id"] = null;
        }
        if (!("created_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["created_at"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Folder instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Folder}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Folder(/** @type {Partial<Folder>} */($$parsedSource));
    }
}

/**
 * Request represents an API request
 */
export class Request {
    /**
     * Creates a new Request instance.
     * @param {Partial<Request>} [$$source = {}] - The source object to create the Request.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("method" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["method"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("headers" in $$source)) {
            /**
             * JSON string
             * @member
             * @type {string}
             */
            this["headers"] = "";
        }
        if (!("body" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["body"] = "";
        }
        if (!("collection_id" in $$source)) {
            /**
             * @member
             * @type {number | null}
             */
            this["collection_id"] = null;
        }
        if (!("folder_id" in $$source)) {
            /**
             * @member
             * @type {number | null}
             */
            this["folder_id"] = null;
        }
        if (!("created_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["created_at"] = null;
        }
        if (!("updated_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["updated_at"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Request instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Request}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Request(/** @type {Partial<Request>} */($$parsedSource));
    }
}

/**
 * RequestHistory represents a request execution history
 */
export class RequestHistory {
    /**
     * Creates a new RequestHistory instance.
     * @param {Partial<RequestHistory>} [$$source = {}] - The source object to create the RequestHistory.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("request_id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["request_id"] = 0;
        }
        if (!("response_status" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["response_status"] = 0;
        }
        if (!("response_time" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["response_time"] = 0;
        }
        if (!("response_body" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["response_body"] = "";
        }
        if (!("response_headers" in $$source)) {
            /**
             * JSON string
             * @member
             * @type {string}
             */
            this["response_headers"] = "";
        }
        if (!("executed_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["executed_at"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RequestHistory instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RequestHistory}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RequestHistory(/** @type {Partial<RequestHistory>} */($$parsedSource));
    }
}
